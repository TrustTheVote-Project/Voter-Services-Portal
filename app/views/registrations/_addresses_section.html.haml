#address.section{ 'data-bind' => "vis: page() == 'address'" }
  .head
    %h3 #{raw t('residence_address')}
    .description
      = raw t 'addresses.description', address_name: raw(t('residence_address').capitalize)

  - if address_config['us_format']
    .row
      .span10
        .checkbox
          = f.check_box :vvr_is_rural, 'data-bind' => 'checkedWithInit: vvrIsRural'
          = f.label :vvr_is_rural, t('rural')
        <!-- ko if: paperlessSubmission -->
        <br/>
        #{t("dmv.address_info")}
        <!-- /ko -->

    .row
      .span10
        .address-field
          <!-- ko ifnot: vvrIsRural -->
          = f.label :vvr_address_1, t('addresses.address')
          = f.text_field :vvr_address_1, autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "vvrAddress1" }, valueUpdate: "afterkeyup"'
          <!-- /ko -->
          <!-- ko if: vvrIsRural -->
          = f.label :vvr_address_1, t('addresses.rural_address')
          = f.text_field :vvr_address_1, autocomplete: ac, maxlength: AppConfig['rural_address_length'], 'data-bind' => 'instantValidation: { accessor: "vvrAddress1" }, valueUpdate: "afterkeyup"'
          <!-- /ko -->
        <!-- ko ifnot: vvrIsRural -->
        .address-field
          = f.label :vvr_address_2 do
            = t('addresses.address_2')
            %span= t('optional')
          = f.text_field :vvr_address_2, autocomplete: ac, 'data-bind' => 'valueWithInit: vvrAddress2'
        <!-- /ko -->
  - elsif address_config['canada_format']
    .row
      .span10
        .radio
          = radio_button :registration, :ca_address_type, '1', {autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "caAddressType" }' }
          %label{for: 'registration_ca_address_type_1'}= raw t 'ca_civic'
        .radio
          = radio_button :registration, :ca_address_type, '0', {autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "caAddressType" }'} 
          %label{for: 'registration_ca_address_type_0'}= raw t 'ca_lot_concession'
        <!-- ko if: paperlessSubmission && enableDMVAddressDisplay -->
        <br/>
        #{t("dmv.address_info")}
        <!-- /ko -->
    .row
      .span10
        .ca-address-field.row
          .span3
            = f.label :ca_address_street_number, t('addresses.street_number')
            = f.text_field :ca_address_street_number, autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "caAddressStreetNumber", validation: "caStreetNumber" }, valueUpdate: "afterkeyup"', class: 'span2'
          .span4
            = f.label :ca_address_street_name, t('addresses.street_name')
            = f.text_field :ca_address_street_name, autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "caAddressStreetName", validation: "caStreetName" }, valueUpdate: "afterkeyup"', class: 'span4'
          .span2
            = f.label :ca_address_street_type, t('addresses.street_type')
            = f.select :ca_address_street_type, Dictionaries::CA_STREET_TYPES, { include_blank: true }, { autocomplete: ac, class: 'span2', 'data-bind' => 'instantValidation: { accessor: "caAddressStreetType" }' }
            
        .ca-address-field.row
          .span3
            = f.label :ca_address_direction do
              = t('addresses.direction')
              %span= t('optional')
            = f.select :ca_address_direction, Dictionaries::CA_DIRECTIONS, { include_blank: true }, { class: 'span2', 'data-bind' => 'valueWithInit: caAddressDirection' }
            
          .span3
            = f.label :ca_address_unit do
              = t('addresses.unit')
              %span= t('optional')
            = f.text_field :ca_address_unit, autocomplete: ac, 'data-bind' => 'valueWithInit: caAddressUnit', class: 'span3'



  
        
  .row
    .span3.town
      = f.label :vvr_town, t('addresses.city_town')
      = f.text_field :vvr_town, autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "vvrTown" }, valueUpdate: "afterkeyup"'
    .state-field{class: address_config['explicit_state'] ? "short span2" : "span4"}
      %span= t('addresses.state')
      - if address_config['explicit_state']
        = text_field_tag "state", address_config['explicit_state'], disabled: true, class: 'span1'
        = f.hidden_field :vvr_state, autocomplete: ac, 'data-bind' => 'value: vvrState'
      - else
        = f.select :vvr_state, Dictionaries::STATES, { include_blank: true }, { autocomplete: ac, class: 'span3', 'data-bind' => 'instantValidation: { accessor: "vvrState" }' }
     
    - if address_config['us_format'] 
      .span3.zip-field
        %table
          %tr
            %td= f.label :vvr_zip5, t('addresses.zip5')
            %td &nbsp;
            %td
              = f.label :vvr_zip4 do
                = t('addresses.zip4')
                %span= t('optional')
          %tr
            %td= f.text_field :vvr_zip5, maxlength: 5, autocomplete: ac, class: 'first-zip', 'data-bind' => 'instantValidation: { accessor: "vvrZip5", validation: "zip5" }, valueUpdate: "afterkeyup"', placeholder: 'NNNNN'
            %td.space &mdash;
            %td= f.text_field :vvr_zip4, maxlength: 4, autocomplete: ac, class: 'second-zip', 'data-bind' => 'valueWithInit: vvrZip4, valueUpdate: "afterkeyup"', placeholder: 'NNNN'
    - if address_config['canada_format']
      .span3.zip-field
        = f.label :vvr_zip5, t('addresses.postal_code')
        = f.text_field :vvr_zip5, maxlength: 7, autocomplete: ac, class: 'postal-code', 'data-bind' => 'instantValidation: { accessor: "vvrZip5", validation: "caPostalCode" }, valueUpdate: "afterkeyup"', placeholder: address_config['placeholder_zip']
        
  - if address_config['virginia_address']  
    .row
      .span3
        = f.label :vvr_county_or_city, t('addresses.county_or_city')
        = f.select :vvr_county_or_city, Office.localities, { include_blank: true }, { autocomplete: ac, class: 'span3', 'data-bind' => 'instantValidation: { accessor: "vvrCountyOrCity" }' }

  <!-- ko if: domestic() && !isConfidentialAddress() -->
  .row
    .span10
      .checkbox
        = f.check_box :ma_is_different, 'data-bind' => 'checkedWithInit: maIsDifferent'
        = f.label :ma_is_different, t("mailing_address.different.#{AppConfig['enable_limit_on_domestic_voter_mailing_address'] ? 'limit' : 'no_limit'}", address: t('residence_address').downcase)
  <!-- /ko --> <!-- domestic -->

  <!-- ko if: overseas -->
  .row
    .span12
      .radio
        = radio_button :registration, :vvr_uocava_residence_available, '1', { autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "vvrOverseasRA" }' }
        %label{ for: 'registration_vvr_uocava_residence_available_1' }= raw t 'addresses.still_available'
      .radio
        = radio_button :registration, :vvr_uocava_residence_available, '0', { autocomplete: ac, 'data-bind' => 'instantValidation: { accessor: "vvrOverseasRA" }' }
        %label{ for: 'registration vvr_uocava_residence_available_0' }= raw t 'addresses.not_available'

  <!-- ko if: vvrOverseasRA() == '0' -->
  .row
    .span12
      %span= raw t 'addresses.my_last_date_of_residence'
      = bound_date f, :vvr_uocava_residence_unavailable_since, { end_year: Date.today.year }, class: 'date'
  <!-- /ko -->
  <!-- /ko --> <!-- overseas -->
