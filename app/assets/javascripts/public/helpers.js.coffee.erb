window.present = (v) ->
  if typeof(v) == 'string'
    filled(v)
  else if v == null
    false
  else if typeof(v) == 'object'
    if v.length then v.length > 0 else !!(v)
  else if typeof(v) == 'number'
    true
  else
    !!(v)

window.filled  = (v) -> !!v && !v.match(/^\s*$/)
window.join    = (a, sep) -> $.map(a, (i) -> if filled(i) then i else null).join(sep)
window.zip5    = (v) -> filled(v) && v.match(/^\d{5}$/)
window.ssn     = (v) -> filled(v) && v.match(/^([\(\)\-\s]*\d[\(\)\-\s]*){9}$/)
window.ssn4    = (s) -> filled(s) && s.match(/^\d{4}$/)
window.voterId = (s) -> filled(s) && s.match(/^\d{9}$/)
window.isDmvId = (s) -> !filled(s) or s.replace(/[ \-]/g, '').match(/^[0-9a-z]{<%= AppConfig['state_id_length']['min'] %>,<%= AppConfig['state_id_length']['max'] %>}$/i)
window.yesNo   = (v) -> if v == '1' then "Yes" else "No"
window.valueOrUnspecified = (v) -> if filled(v) then v else "Unspecified"
window.time = (h, m) -> moment("#{h}:#{m}", "HH:mm").format("h:mm A")

window.date = (y, m, d) ->
  str = "#{y}-#{m}-#{d}"
  dte = moment(str, "YYYY-M-D")
  if dte.format("YYYY-M-D") == str then dte else false

window.pastDate = (y, m, d) ->
  dte = date(y, m, d)
  if dte && dte.diff(new Date()) < 0 then dte else false

window.phone  = (v) -> v.match(/^([\(\)\-\s]*\d[\(\)\-\s]*){10}$/)
window.email  = (v) -> v.match(/^\S+@\S+\.\S+$/)

window.stepClass = (current, idx, def) ->
  def = def || 'span2'
  if current == idx
    "current #{def}"
  else if current > idx
    "done #{def}"
  else
    def

# Value handler that respects the existing value
ko.bindingHandlers.valueWithInit = {
  init: (element, valueAccessor, allBindingsAccessor, context) ->
    property = valueAccessor()
    value = $(element).val()

    ko.bindingHandlers.value.init(element, valueAccessor, allBindingsAccessor, context)
    property(value)

  update: (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) ->
    ko.bindingHandlers.value.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext)
}

ko.bindingHandlers.checkedWithInit = {
  init: (element, valueAccessor, allBindingsAccessor, context) ->
    property = valueAccessor()
    el = $(element)
    checked = el.is(':checked')
    value   = el.val()

    ko.bindingHandlers.checked.init(element, valueAccessor, allBindingsAccessor, context)
    if checked
      if el.is(":checkbox")
        property(checked)
      else
        property(value)

  update: (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) ->
    ko.bindingHandlers.checked.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext)
}

# Value handler that hides / shows the section depending on
# the field value.
ko.bindingHandlers.vis = {
  update: (element, valueAccessor) ->
    value = ko.utils.unwrapObservable(valueAccessor())
    isCurrentlyVisible = !(element.style.display == "none")
    if value && !isCurrentlyVisible
      element.style.display = "block"
    else if !value && isCurrentlyVisible
      element.style.display = "none"
}

ko.bindingHandlers.instantValidation = {
  init: (element, valueAccessor, allBindingsAccessor, viewModel) =>
    options = valueAccessor()
    accessor = options.accessor
    attribute = options.attribute || accessor
    validation = options.validation || 'present'

    toggleElement = $(element).is(':checkbox, :radio')
    selectElement = $(element).is('select')
    event = if toggleElement then 'click' else 'blur'

    newValueAccessor = => viewModel[accessor]
    if toggleElement
      ko.bindingHandlers.checkedWithInit.init(element, newValueAccessor, allBindingsAccessor, viewModel)
    else
      ko.bindingHandlers.valueWithInit.init(element, newValueAccessor, allBindingsAccessor, viewModel)

    validate = =>
      $e = $(element)
      $p = $e.parent()
      if options.complex
        $e.attr('data-touched', true)
        allCount = $p.children('[data-bind]').length
        touchedCount = $p.children('[data-touched]').length
        return if touchedCount < allCount
      elementAcceptor = $p
      errorClass = 'field-invalid'
      attributeValue = viewModel[attribute]()

      if window[validation](attributeValue)
        elementAcceptor.removeClass(errorClass)
        $(options.resetAlso).removeClass(errorClass) if options.resetAlso
      else
        elementAcceptor.addClass(errorClass)

    $(element).bind(event, validate).bind("validate", validate)

  update: (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) ->
    toggleElement = $(element).is(':checkbox, :radio')
    va = viewModel[valueAccessor().accessor]
    if toggleElement
      ko.bindingHandlers.checked.update(element, va, allBindingsAccessor, viewModel, bindingContext)
    else
      ko.bindingHandlers.value.update(element, va, allBindingsAccessor, viewModel, bindingContext)
}
