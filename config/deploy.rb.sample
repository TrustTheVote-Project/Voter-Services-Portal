require 'sidekiq/capistrano'

def sample_deploy_domain
  case ENV['SAMPLE_DEPLOY_TARGET']
  when "VA"
    # vavsp.trustthevote.org
    "54.243.43.115"
  when "ON"
    # onvsp.trustthevote.org
    "54.235.245.205"
  when "RI"
    # c
    "54.225.97.231"
  else
    ""
  end
end

def sample_deploy_key
  case ENV['SAMPLE_DEPLOY_TARGET']
  when "VA"
    "oset-vaconfigdemo.pem"
  when "ON", "RI"
    "oset-on-demo.pem"
  else
    "osdv.pem"
  end
end

def sample_deploy_branch
  "config_eligibility"
end

# Location configuration
set :domain,      sample_deploy_domain            # Domain name or IP address of the server
set :user,        "deploy"                        # Unix user to own the deployment
set :runner,      "deploy"                        # Same as :user
set :deploy_to,   "/home/deploy/va-portal"        # Path to the deployment directory

# Common configuration
set :application, "va-portal"
set :repository,  "git://github.com/trustthevote-project/Voter-Services-Portal.git"
set :branch,      sample_deploy_branch
set :rails_env,   "production"

role :web, domain
role :app, domain
role :db,  domain, :primary => true

set :use_sudo,              false
set :scm,                   :git
set :deploy_via,            :export
set :rake,                  "bundle exec rake"
set :whenever_command,      "bundle exec whenever"
set :whenever_environment,  "production"

set :default_shell, "/bin/bash"
ssh_options[:user] = "deploy"
ssh_options[:keys] = [ "~/.ssh/#{sample_deploy_key}" ]
default_run_options[:pty] = true

set :default_environment, {
  BASH_ENV: '~/.bashrc.cap'
}

# Create uploads directory and link
namespace :deploy do
  # namespace :assets do
  #   task :precompile, :roles => :app, :except => { :no_release => true } do
  #     from = source.next_revision(current_revision)
  #     if capture("cd #{latest_release} && #{source.local.log(from)} vendor/assets/ app/assets/ | wc -l").to_i > 0
  #       run %Q{cd #{latest_release} && #{rake} RAILS_ENV=#{rails_env} #{asset_env} assets:precompile}
  #     else
  #       logger.info "Skipping asset pre-compilation because there were no asset changes"
  #     end
  #   end
  # end
    
  task :shared, :roles => :app do
    # run "cp #{shared_path}/config/database.yml #{latest_release}/config/database.yml"
    # run "cp #{shared_path}/config/config.yml #{latest_release}/config/config.yml"
    # run "cp #{shared_path}/config/config_service.yml #{latest_release}/config/config_service.yml"
    # run "cp #{shared_path}/config/config_timely.yml #{latest_release}/config/config_timely.yml"
    
    run "rm -f #{latest_release}/config/database.yml"
    run "ln -nfs #{shared_path}/config/database.yml #{latest_release}/config/database.yml"

    
    if ENV['SAMPLE_DEPLOY_TARGET']  #copy repo files into live ones
      # Set the ENV variable on the server
      # TODO this doesn't actually keep the value set :(
      run "export SAMPLE_DEPLOY_TARGET=#{ENV['SAMPLE_DEPLOY_TARGET']}"
    end
    # use shared files
    # run "rm -f #{latest_release}/config/config.yml"
    # run "ln -nfs #{shared_path}/config/config.yml #{latest_release}/config/config.yml"
    #
    # run "rm -f #{latest_release}/config/config_service.yml"
    # run "ln -nfs #{shared_path}/config/config_service.yml  #{latest_release}/config/config_service.yml"
    #
    # run "rm -f #{latest_release}/config/config_timely.yml"
    # run "ln -nfs #{shared_path}/config/config_timely.yml  #{latest_release}/config/config_timely.yml"
    #
    # run "rm -f #{latest_release}/config/config_ovr.yml"
    # run "ln -nfs #{shared_path}/config/config_ovr.yml  #{latest_release}/config/config_ovr.yml"
    
    
  end
end

namespace :db do
  task :seed, :roles => :app do
    run "cd #{latest_release} && RAILS_ENV=#{rails_env} bundle exec rake db:seed"
  end
end

# Passenger tasks
namespace :deploy do
  task :start do ; end
  task :stop do ; end

  task :restart, :roles => :app, :except => { :no_release => true } do
    run "#{try_sudo} touch #{File.join(current_path, 'tmp', 'restart.txt')}"
  end
end

namespace :va do
  task :reload_offices, :roles => :app do
    run "cd #{latest_release} && RAILS_ENV=#{rails_env} bundle exec rake va:reload_offices"
  end
end

after  "deploy:finalize_update", "deploy:shared"
before "deploy:restart", "va:reload_offices"
after  "deploy:restart", "deploy:cleanup"

require 'bundler/capistrano'
require 'whenever/capistrano'
