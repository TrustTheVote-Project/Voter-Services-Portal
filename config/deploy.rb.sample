# Location configuration
set :domain,      "server.com"                    # Domain name or IP address of the server
set :user,        "deploy"                        # Unix user to own the deployment
set :runner,      "deploy"                        # Same as :user
set :deploy_to,   "/home/deploy/server.com"       # Path to the deployment directory

# Common configuration
set :application, "va-vote"
set :repository,  "git://github.com/trustthevote/Virginia-Voter-Services-Portal.git"
set :branch,      "master"
set :rails_env,   "production"

role :web, domain
role :app, domain
role :db,  domain, :primary => true

set :use_sudo,              false
set :scm,                   :git
set :deploy_via,            :export
set :rake,                  "bundle exec rake"
set :whenever_command,      "bundle exec whenever"
set :whenever_environment,  "production"

# Bundled gems
task :bundle_gems, :roles => :app do
  run "mkdir -p #{shared_path}/bundle && ln -s #{shared_path}/bundle #{release_path}/vendor/bundle"
  run "cd #{latest_release}; bundle install --deployment --without development test"
end

# Create uploads directory and link
task :deploy_shared, :roles => :app do
  run "cp #{shared_path}/config/database.yml #{latest_release}/config/database.yml"
  run "cp #{shared_path}/config/config.yml #{latest_release}/config/config.yml"
end

namespace :db do
  task :seed, :roles => :app do
    run "cd #{latest_release} && RAILS_ENV=#{rails_env} bundle exec rake db:seed"
  end
end

# Passenger tasks
namespace :deploy do
  task :start do ; end
  task :stop do ; end

  task :restart, :roles => :app, :except => { :no_release => true } do
    run "#{try_sudo} touch #{File.join(current_path, 'tmp', 'restart.txt')}"
  end
end

# Asset pipeline
namespace :assets do
  task :precompile, :roles => :app do
    run "cd #{current_path} && RAILS_ENV=#{rails_env} bundle exec rake assets:precompile"
  end
end

after  "deploy:update_code", "deploy_shared"
after  "deploy:update_code", "bundle_gems"
before "deploy:restart", "assets:precompile"
after  "deploy:restart", "deploy:cleanup"

require 'whenever/capistrano'
